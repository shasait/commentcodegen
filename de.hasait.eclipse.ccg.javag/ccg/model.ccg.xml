<?xml version="1.0" encoding="UTF-8"?>
<ccg>
	<application package="de.hasait.eclipse.ccg.javag">
		<model name="java">
		
			<class name="MRoot">
				<import type="de.hasait.eclipse.common.StringUtil" />
				<import type="de.hasait.eclipse.common.resource.XFolder" />
				<import type="org.eclipse.core.runtime.IProgressMonitor" />
				<import type="org.eclipse.core.runtime.CoreException" />
				<property name="folder" type="XFolder" final="true" required="true" />
				<property name="package" type="MPackage" cardinality="*" backref="root" />
			</class>
			
			<class name="MPackage">
				<import type="de.hasait.eclipse.common.StringUtil" />
				<import type="de.hasait.eclipse.common.resource.XFolder" />
				<import type="org.eclipse.core.runtime.IProgressMonitor" />
				<import type="org.eclipse.core.runtime.CoreException" />
				<property name="root" type="MRoot" backref="package" final="true" required="true" />
				<property name="name" type="String" final="true" required="true" />
				<property name="fullQualifiedName" type="String" final="true" required="true">
					<value><![CDATA[
						getName()
					]]></value>
				</property>
				<property name="folder" type="XFolder" final="true" required="true">
					<value><![CDATA[
						getRoot().getFolder().getFolder(StringUtil.replace(getFullQualifiedName(), ".", "/"));
					]]></value>
				</property>
				<property name="compilationUnit" type="MCompilationUnit" cardinality="*" backref="package" />
				<property name="resource" type="MResource" cardinality="*" backref="package" />
			</class>

			<class name="MResource">
				<import type="org.eclipse.core.runtime.IProgressMonitor" />
				<import type="org.eclipse.core.runtime.CoreException" />
				<import type="de.hasait.eclipse.common.resource.XFile" />
				<import type="de.hasait.eclipse.common.resource.XFolder" />
				<import type="de.hasait.eclipse.common.ContentBuffer" />
				<property name="package" type="MPackage" backref="resource" final="true" required="true" />
				<property name="name" type="String" final="true" required="true" />
				<property name="file" type="XFile" final="true" required="true">
					<value><![CDATA[
						getPackage().getFolder().getFile(getName())
					]]></value>
				</property>
				<property name="doNotWrite" type="boolean" />
				<property name="content" type="String" cardinality="*" />
			</class>
			
			<class name="AbstractMTypeContainer" abstract="true">
				<import type="java.util.Map" />
				<import type="de.hasait.eclipse.common.ContentBuffer" />
				<property name="type" type="AbstractMType" cardinality="*" backref="container" />
				<property name="compilationUnit" type="MCompilationUnit" abstract="true" writevisibility="private" />
				<property name="fullQualifiedName" type="String" abstract="true" writevisibility="private" />
			</class>
			
			<class name="MCompilationUnit" extends="AbstractMTypeContainer">
				<import type="java.util.Map" />
				<import type="org.eclipse.core.runtime.IProgressMonitor" />
				<import type="org.eclipse.core.runtime.CoreException" />
				<import type="de.hasait.eclipse.common.resource.XFile" />
				<import type="de.hasait.eclipse.common.ContentBuffer" />
				<import type="de.hasait.eclipse.ccg.javag.util.CodeUtils" />
				<property name="package" type="MPackage" backref="compilationUnit" final="true" required="true" />
				<property name="compilationUnit" type="MCompilationUnit" final="true" required="true" value="this" />
				<property name="fullQualifiedName" type="String" final="true" required="true">
					<value><![CDATA[
						getPackage().getFullQualifiedName()
					]]></value>
				</property>
				<property name="firstType" type="AbstractMType" writevisibility="private" />
				<updater name="firstType" listento="type"><![CDATA[
					setFirstType(isTypeEmpty() ? null : getType(0));
				]]></updater>
				<property name="name" type="String" writevisibility="private" />
				<updater name="name" listento="firstType"><![CDATA[
					AbstractMType vFirstType = getFirstType();
					setName(vFirstType == null ? null : vFirstType.getName());
				]]></updater>
				<property name="file" type="XFile" writevisibility="private" />
				<updater name="file" listento="name"><![CDATA[
					String vName = getName();
					setFile(vName == null ? null : getPackage().getFolder().getFile(vName));
				]]></updater>
				<property name="import" type="AbstractMType" cardinality="*" backref="imported" />
				<property name="doNotWrite" type="boolean" />
			</class>
			
			<class name="AbstractMType" extends="AbstractMTypeContainer" abstract="true">
				<import type="java.util.Map" />
				<import type="de.hasait.eclipse.common.ContentBuffer" />
				<import type="de.hasait.eclipse.ccg.javag.util.CodeUtils" />
				<property name="container" type="AbstractMTypeContainer" backref="type" final="true" required="true" />
				<property name="compilationUnit" type="MCompilationUnit" final="true" required="true">
					<value><![CDATA[
						getContainer().getCompilationUnit()
					]]></value>
				</property>
				<property name="name" type="String" final="true" required="true" />
				<property name="fullQualifiedName" type="String" final="true" required="true">
					<value><![CDATA[
						getContainer().getFullQualifiedName() + "." + getName()
					]]></value>
				</property>
				<property name="imported" type="MCompilationUnit" backref="import" />
				<property name="abstractMethod" type="MMethodDeclaration" cardinality="*" backref="owner" />
				<property name="staticField" type="MStaticFieldDeclaration" cardinality="*" backref="owner" />
				<property name="visibility" type="String" />
			</class>
			
			<class name="MClass" extends="AbstractMType">
				<import type="java.util.Map" />
				<import type="de.hasait.eclipse.common.ContentBuffer" />
				<import type="de.hasait.eclipse.ccg.javag.util.CodeUtils" />
				<property name="abstract" type="boolean" />
				<property name="final" type="boolean" />
				<property name="extends" type="MClass" backref="derived" final="true" />
				<property name="derived" type="MClass" cardinality="*" backref="extends" />
				<property name="implements" type="MInterface" cardinality="*" backref="implementor" />
				<property name="constructor" type="MConstructorImplementation" cardinality="*" backref="owner" />
				<property name="instanceField" type="MInstanceFieldDeclaration" cardinality="*" backref="owner" />
				<property name="implementedMethod" type="MMethodImplementation" cardinality="*" backref="owner" />
			</class>
			
			<class name="MInterface" extends="AbstractMType">
				<import type="java.util.Map" />
				<import type="de.hasait.eclipse.common.ContentBuffer" />
				<import type="de.hasait.eclipse.ccg.javag.util.CodeUtils" />
				<property name="extends" type="MInterface" cardinality="*" backref="derived" />
				<property name="derived" type="MInterface" cardinality="*" backref="extends" />
				<property name="implementor" type="MClass" cardinality="*" backref="implements" />
			</class>
			
			<class name="MMethodDeclaration">
				<import type="de.hasait.eclipse.common.ContentBuffer" />
				<property name="owner" type="AbstractMType" cardinality="*" backref="abstractMethod" final="true" required="true" />
				<property name="implementation" type="MMethodImplementation" cardinality="*" backref="declaration" />
				<property name="visibility" type="String" />
				<property name="name" type="String" final="true" required="true" />
				<property name="resultType" type="AbstractMType" />
				<property name="parameter" type="MMethodParameterDeclaration" cardinality="*" />
			</class>
			
			<class name="MMethodParameterDeclaration">
				<import type="de.hasait.eclipse.common.ContentBuffer" />
				<property name="type" type="AbstractMType" final="true" required="true" />
				<property name="name" type="String" final="true" required="true" />
			</class>			
			
			<class name="MMethodImplementation">
				<import type="java.util.Map" />
				<import type="de.hasait.eclipse.common.ContentBuffer" />
				<property name="owner" type="MClass" backref="implementedMethod" final="true" required="true" />
				<property name="declaration" type="MMethodDeclaration" backref="implementation" final="true" required="true" />
				<property name="finalParameter" type="MMethodParameterDeclaration" cardinality="*" />
				<property name="code" type="MCodeBuffer" final="true" required="true" value="new MCodeBuffer()" />
			</class>
			
			<class name="MConstructorImplementation">
				<import type="java.util.Map" />
				<import type="de.hasait.eclipse.common.ContentBuffer" />
				<property name="owner" type="MClass" backref="constructor" final="true" required="true" />
				<property name="name" type="String" />
				<property name="parameterFinal" type="Boolean" cardinality="*" />
				<property name="parameterType" type="AbstractMType" cardinality="*" />
				<property name="parameterName" type="String" cardinality="*" />
				<property name="code" type="MCodeBuffer" final="true" required="true" value="new MCodeBuffer()" />
			</class>
			
			<class name="AbstractMFieldDeclaration" abstract="true">
				<import type="de.hasait.eclipse.common.ContentBuffer" />
				<property name="type" type="AbstractMType" />
				<property name="name" type="String" />
				<property name="visibility" type="String" />
				<property name="final" type="boolean" />
				<property name="value" type="String" />
			</class>
			
			<class name="MStaticFieldDeclaration" extends="AbstractMFieldDeclaration">
				<import type="de.hasait.eclipse.common.ContentBuffer" />
				<property name="owner" type="AbstractMType" backref="staticField" final="true" required="true" />
			</class>
			
			<class name="MInstanceFieldDeclaration" extends="AbstractMFieldDeclaration">
				<import type="de.hasait.eclipse.common.ContentBuffer" />
				<property name="owner" type="MClass" backref="instanceField" final="true" required="true" />
			</class>

			<!-- CodeLevel  -->

			<class name="MCodeBuffer">
				<import type="java.util.Map" />
				<import type="de.hasait.eclipse.common.ContentBuffer" />
				<property name="statement" type="AbstractMCodeStatement" cardinality="*" />
			</class>
			
			<class name="AbstractMCodeStatement" abstract="true">
			</class>
			
			<class name="MTextCodeStatement" extends="AbstractMCodeStatement">
				<property name="statementText" type="String" final="true" required="true" />
			</class>
			
			<class name="MUserCodeStatement" extends="AbstractMCodeStatement">	
				<property name="userBlockName" type="String" final="true" required="true" />
			</class>
			
			<class name="MAssignmentCodeStatement" extends="AbstractMCodeStatement">
				<property name="varName" type="String" final="true" required="true" />
				<property name="valueExpression" type="AbstractMCodeExpression" final="true" required="true" />
			</class>
			
			<class name="AbstractMCodeExpression" abstract="true">
			</class>
			
			<class name="MTextCodeExpression" extends="AbstractMCodeExpression">
				<property name="expressionText" type="String" final="true" required="true" />
			</class>			
		</model>
	</application>
</ccg>
