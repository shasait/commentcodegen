<%@ jet
	package="de.hasait.eclipse.ccg.javag.pattern"
	class="PropertyJetBlockGenerator"
	imports="de.hasait.eclipse.common.StringUtil"
	skeleton="../CcgJetBlockGenerator.skeleton"
%>
<%
String type = configElement.getRequiredAttribute("type");
String name = configElement.getRequiredAttribute("name");
String capName = StringUtil.capitalize(name);
String oldName = "old" + capName;
String cardinality = configElement.getAttribute("cardinality");
boolean many = !(cardinality == null || cardinality.equals("1"));
boolean bound = configElement.getAttributeAsBoolean("bound", false);
boolean afterSet = configElement.getAttributeAsBoolean("afterset", false);
boolean beforeSet = configElement.getAttributeAsBoolean("beforeset", false);
boolean hooked = configElement.getAttributeAsBoolean("hooked", false);
boolean vSynchronized = configElement.getAttributeAsBoolean("synchronized", false);
boolean readonly = configElement.getAttributeAsBoolean("final", false);
String backref = configElement.getAttribute("backref");
String vBackrefCardinality = configElement.getAttribute("backrefcardinality");
boolean backrefMany = !(vBackrefCardinality == null || vBackrefCardinality.equals("1"));

String setterVisibility = null;
if (readonly) {
	setterVisibility = "protected";
} else {
	setterVisibility = "public";
}
String capBackref = null;;
if (backref != null) {
	capBackref = StringUtil.capitalize(backref);
}
String mName = "_" + name;
String pName = name;
if (many) {
	mName = mName + "s";
}
String getterPrefix = (type.equals("boolean") || type.equals("Boolean")
	|| type.equals("java.lang.Boolean")) ? "is" : "get";
%>

	/**
	 *  Property <%= name %>
	 */
<% String nameConstant = "PROPERTYNAME_" + name.toUpperCase(); %>
	public static final String <%= nameConstant %> = <%= "\"" + name + (many?"s":"") + "\"" %>;
<% if (!many) { %>
	/** The single property field <%= name %>. */
	private <%= type %> <%= mName %>;
	
	/**
	 * Returns the <%= name %>.
	 */
	public final <%= type %> <%= getterPrefix %><%= capName %>() {
<% if (vSynchronized) {	%>
		synchronized (this) {<% } %>
			return <%= mName %>;
<% if (vSynchronized) { %>
		}
<% } %>
	}
	
	/**
	 * Sets the <%= name %>.
	 */
	<%= setterVisibility %> final void set<%= capName %>(final <%= type %> <%= pName %>) {
<% if (bound || hooked || (backref != null)) { %>
		<%= type %> <%= oldName %>;
<% } %>
<% if (vSynchronized) { %>
		synchronized (this) {
<% } %>
<% if (beforeSet) { %>
			if (beforeSet<%= capName %>(<%= pName %>)) {
				return;
			}
<% } %>
<% if (bound || hooked || (backref != null)) { %>
			if (<%= mName %> == <%= pName %>) {
				return;
			}
			<%= oldName %> = <%= mName %>;
<% } %>
<% if (hooked || (backref != null)) { %>
			if (<%= mName %> != null) {
				<%= mName %> = null;
<% if (backref != null) { %>
<% if (backrefMany) { %>
				<%= oldName %>.remove<%= capBackref %>(this);
<% } else { %>
				<%= oldName %>.set<%= capBackref %>(null);
<% } %>
<% } %>
<% if (hooked) { %>
				old<%= capName %>(<%= oldName %>);
<% } %>
			}
<% } %>
			<%= mName %> = <%= pName %>;
<% if (hooked || (backref != null)) { %>
			if (<%= mName %> != null) {
<% if (backref != null) { %>
<% if (backrefMany) { %>
				<%= pName %>.add<%= capBackref %>(this);
<% } else { %>
				<%= pName %>.set<%= capBackref %>(this);
<% } %>
<% } %>
<% if (hooked) { %>
				new<%= capName %>(<%= pName %>);
<% } %>
			}
<% } %>
<% if (vSynchronized) { %>
		}
<% } %>
<% if (bound) { %>
		firePropertyChange(<%= nameConstant %>, <%= oldName %>, <%= pName %>);
<% } %>
<% if (afterSet) { %>
		afterSet<%= capName %>(<%= pName %>);
<% } %>
	}
<% } else { %>
	/** The many property field <%= name %>. */
	private final java.util.List <%= mName %> = new java.util.ArrayList();

	/**
	 * Returns the array of all <%= name %>s.
	 */
	public final <%= type %>[] get<%= capName %>s() {
<% if (vSynchronized) { %>
		synchronized (this) {
<% } %>
			return (<%= type %>[])<%= mName %>.toArray(new <%= type %>[<%= mName %>.size()]);
<% if (vSynchronized) { %>
		}
<% } %>
	}

	/**
	 * Returns the <%= name %> at the specified index.
	 */
	public final <%= type %> get<%= capName %>(final int index) {
<% if (vSynchronized) { %>
		synchronized (this) {
<% } %>
			return (<%= type %>)<%= mName %>.get(index);
<% if (vSynchronized) { %>
		}
<% } %>
	}

	/**
	 * Returns if the specified <%= name %> is contained.
	 */
	public final boolean contains<%= capName %>(final <%= type %> <%= pName %>) {
<% if (vSynchronized) { %>
		synchronized (this) {
<% } %>
			return <%= mName %>.contains(<%= pName %>);
<% if (vSynchronized) { %>
		}
<% } %>
	}

	/**
	 * Returns how many <%= name %>s are contained.
	 */
	public final int <%= name %>Size() {
<% if (vSynchronized) { %>
		synchronized (this) {
<% } %>
			return <%= mName %>.size();
<% if (vSynchronized) { %>
		}
<% } %>
	}

	/**
	 * Returns if <%= name %> is empty.
	 */
	public final boolean is<%= capName %>Empty() {
<% if (vSynchronized) { %>
		synchronized (this) {
<% } %>
			return <%= mName %>.isEmpty();
<% if (vSynchronized) { %>
		}
<% } %>
	}

	/**
	 * Returns an {@link Iterator} for all <%= name %>s.
	 */
	public final java.util.Iterator <%= name %>Iterator() {
<% if (vSynchronized) { %>
		synchronized (this) {
<% } %>
			return <%= mName %>.iterator();
<% if (vSynchronized) { %>
		}
<% } %>
	}

	/**
	 * Adds the specified <%= name %>.
	 */
	<%= setterVisibility %> final void add<%= capName %>(final <%= type %> <%= pName %>) {
<% if (vSynchronized) { %>
		synchronized (this) {
<% } %>
			if (<%= mName %>.contains(<%= pName %>)) {
				return;
			}
<% if (backref != null) { %>
<% if (backrefMany) { %>
			<%= pName %>.remove<%= capBackref %>(this);
<% } else { %>
			<%= pName %>.set<%= capBackref %>(null);
<% } %>
<% } %>
			<%= mName %>.add(<%= pName %>);
<% if (backref != null) { %>
<% if (backrefMany) { %>
			<%= pName %>.add<%= capBackref %>(this);
<% } else { %>
			<%= pName %>.set<%= capBackref %>(this);
<% } %>
<% } %>
<% if (hooked) { %>
			new<%= capName %>(<%= pName %>);
<% } %>
<% if (vSynchronized) { %>
		}
<% } %>
<% if (bound) { %>
		firePropertyChange(<%= nameConstant %>, null, <%= pName %>);
<% } %>
	}
		
	/**
	 * Removes the specified <%= name %>.
	 */
	<%= setterVisibility %> final void remove<%= capName %>(final <%= type %> <%= pName %>) {
<% if (vSynchronized) { %>
		synchronized (this) {
<% } %>
			if (!<%= mName %>.contains(<%= pName %>)) {
				return;
			}
			<%= mName %>.remove(<%= pName %>);
<% if (backref != null) { %>
<% if (backrefMany) { %>
			<%= pName %>.remove<%= capBackref %>(this);
<% } else { %>
			<%= pName %>.set<%= capBackref %>(null);
<% } %>
<% } %>
<% if (hooked) { %>
			old<%= capName %>(<%= pName %>);
<% } %>
<% if (vSynchronized) { %>
		}
<% } %>
<% if (bound) { %>
		firePropertyChange(<%= nameConstant %>, <%= pName %>, null);
<% } %>
	}

	/**
	 * Remove all <%= name %>s.
	 */
	<%= setterVisibility %> final void removeAll<%= capName %>s() {
		<%= type %>[] <%= name %>s;
<% if (vSynchronized) { %>
		synchronized (this) {
<% } %>
			<%= name %>s = get<%= capName %>s();
<% if (vSynchronized) { %>
		}
<% } %>
		for (int i=0; i<<%= name %>s.length; i++) {
			remove<%= capName %>(<%= name %>s[i]);
		}
	}
<% } %>
	