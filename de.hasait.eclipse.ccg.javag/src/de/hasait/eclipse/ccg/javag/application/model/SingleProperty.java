package de.hasait.eclipse.ccg.javag.application.model;

import org.eclipse.core.runtime.IProgressMonitor;

import de.hasait.eclipse.common.ContentBuffer;
import de.hasait.eclipse.common.xml.XElement;

/**
 * Generated by CommentCodeGen: /ccgtest/ccg/test1.ccg.xml
 */
public class SingleProperty extends AbstractProperty {
	private final String _getMethodName;

	private final String _setMethodName;

	/**
	 * Constructor.
	 */
	public SingleProperty(final Bean pBean, final XElement pConfigElement) {
		super(pBean, pConfigElement);

		if (getType().equals("boolean")) {
			_getMethodName = "is" + getCapName();
		} else {
			_getMethodName = "get" + getCapName();
		}
		_setMethodName = "set" + getCapName();
	}

	/**
	 * @return the getMethodName
	 */
	public final String getGetMethodName() {
		return _getMethodName;
	}

	/**
	 * @return the setMethodName
	 */
	public final String getSetMethodName() {
		return _setMethodName;
	}

	public String getAdderCall(String instance, String value) {
		return instance + "." + getSetMethodName() + "(" + value + ")";
	}

	public String getRemoverCall(String instance, String value) {
		return instance + "." + getSetMethodName() + "(null)";
	}

	public void writeFields(ContentBuffer content, IProgressMonitor monitor) {
		super.writeFields(content, monitor);

		content.a("private ").a(getType()).a(" ").a(getFieldName()).a(";").p();

		content.p();
	}

	public void writeMethods(ContentBuffer content, IProgressMonitor monitor) {
		super.writeMethods(content, monitor);

		//
		// getter
		//
		content.pi("/**", " * ");
		content.p("Return the value of property " + getName() + ".");
		if (getDescription() != null) {
			content.p();
			content.p(getDescription());
		}
		content.p();
		content.p("@return The value of property " + getName() + ".");
		content.pu(" */");

		content.pi(getGetterVisibility() + " final " + getType() + " " + getGetMethodName() + "() {");
		content.p("return " + getFieldName() + ";");
		content.pu("}");

		content.p();

		//
		// setter
		//
		content.pi("/**", " * ");
		content.p("Set the value of property " + getName() + " to the specified value.");
		if (getBackrefProperty() != null) {
			content.p("Referred from " + getBackrefProperty().getJavaDocFullName()
			      + ", which will be updated by this method.");
		}
		if (getDescription() != null) {
			content.p();
			content.p(getDescription());
		}
		content.p();
		content.p("@param " + getParameterVarName() + " The new value for property " + getName() + ".");
		content.pu(" */");

		content.pi(getSetterVisibility() + " final void " + getSetMethodName() + "(final " + getType() + " "
		      + getParameterVarName() + ") {");
		if (getBackrefProperty() == null && !isBound()) {
			content.p(getFieldName() + " = " + getParameterVarName() + ";");
		} else {
			content.pi("if (" + getFieldName() + " == " + getParameterVarName() + ") {");
			content.p("return;");
			content.pu("}");
			content.p(getType() + " " + getLocalVarName() + " = " + getFieldName() + ";");
			if (getBackrefProperty() != null) {
				content.pi("if (" + getFieldName() + " != null) {");
				content.p("" + getFieldName() + " = null;");
				content.p(getBackrefProperty().getRemoverCall(getLocalVarName(), "this") + ";");
				content.pu("}");
			}
			content.p(getFieldName() + " = " + getParameterVarName() + ";");
			if (getBackrefProperty() != null) {
				content.pi("if (" + getName() + " != null) {");
				content.p(getBackrefProperty().getAdderCall(getParameterVarName(), "this") + ";");
				content.pu("}");
			}
			if (isBound()) {
				content.p("// fire change event");
				content.p(getBean().getPropertyChangeSupportName() + ".firePropertyChange(" + getNameConstant() + ", "
				      + getLocalVarName() + ", " + getParameterVarName() + ");");
			}
		}
		content.pu("}");

		content.p();
	}
}
