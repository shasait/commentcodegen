/*
 * $Id: ASingleProperty.java,v 1.3 2007-07-02 13:41:25 concentus Exp $
 * 
 * Copyright 2006 Sebastian Hasait
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package de.hasait.eclipse.ccg.javag.application.model;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.eclipse.core.runtime.IProgressMonitor;

import de.hasait.eclipse.ccg.javag.lowlevel.AbstractMProperty;
import de.hasait.eclipse.ccg.javag.lowlevel.MSingleProperty;
import de.hasait.eclipse.common.xml.XElement;

/**
 * Generated by CommentCodeGen: /ccgtest/ccg/test1.ccg.xml
 */
public class ASingleProperty extends AbstractAProperty {
	private final List _syncs = new ArrayList();

	/**
	 * Constructor.
	 */
	public ASingleProperty(final AClass pBean, final XElement pConfigElement) {
		super(pBean, new MSingleProperty(), pConfigElement);

		XElement[] vSyncElements = pConfigElement.getChildElements("sync");
		for (int vSyncElementsI = 0; vSyncElementsI < vSyncElements.length; vSyncElementsI++) {
			XElement vSyncElement = vSyncElements[vSyncElementsI];
			String vSyncFrom = vSyncElement.getRequiredStringAttribute("from");
			String vSyncTo = vSyncElement.getRequiredStringAttribute("to");
			boolean vSyncBound = vSyncElement.getBooleanAttribute("bound", false);
			addSync(vSyncFrom, vSyncTo, vSyncBound);
		}
	}

	public ASingleProperty(AClass pClazz, AbstractMProperty pProperty, String pBackref) {
		super(pClazz, pProperty, pBackref);
	}

	public final MSingleProperty getSingleProperty() {
		return (MSingleProperty) getProperty();
	}

	public final void addSync(final String pFrom, final String pTo, final boolean pBound) {
		_syncs.add(new APropertySync(this, pFrom, pTo, pBound));
	}

	public boolean transform(int pLayer, IProgressMonitor pMonitor) {
		boolean vResult = super.transform(pLayer, pMonitor);
		for (Iterator vSyncI = _syncs.iterator(); vSyncI.hasNext();) {
			APropertySync vSync = (APropertySync) vSyncI.next();
			if (vSync.transform(pLayer, pMonitor)) {
				vResult = true;
			}
		}
		return vResult;
	}
}
