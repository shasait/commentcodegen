package de.hasait.eclipse.ccg.javag.application.model;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.eclipse.core.runtime.IProgressMonitor;

import de.hasait.eclipse.ccg.javag.application.CodeUtils;
import de.hasait.eclipse.common.ContentBuffer;
import de.hasait.eclipse.common.xml.XElement;

/**
 * Generated by CommentCodeGen: /ccgtest/ccg/test1.ccg.xml
 */
public class MultiProperty extends AbstractProperty {
	private final String _addMethodName;

	private final String _removeMethodName;

	private final Class _collectionClass;

	private final Class _collectionImplClass;

	/**
	 * Constructor.
	 */
	public MultiProperty(final Bean pBean, final XElement pConfigElement) {
		super(pBean, pConfigElement);

		_addMethodName = "add" + getCapName();
		_removeMethodName = "remove" + getCapName();
		_collectionClass = List.class;
		_collectionImplClass = ArrayList.class;
	}

	/**
	 * @return the addMethodName
	 */
	public final String getAddMethodName() {
		return _addMethodName;
	}

	/**
	 * @return the removeMethodName
	 */
	public final String getRemoveMethodName() {
		return _removeMethodName;
	}

	/**
	 * @return the collectionClass
	 */
	public final Class getCollectionClass() {
		return _collectionClass;
	}

	/**
	 * @return the collectionImplClass
	 */
	public final Class getCollectionImplClass() {
		return _collectionImplClass;
	}

	public final String getAdderCall(String instance, String value) {
		return instance + "." + getAddMethodName() + "(" + value + ")";
	}

	public final String getRemoverCall(String instance, String value) {
		return instance + "." + getRemoveMethodName() + "(" + value + ")";
	}

	public void writeFields(ContentBuffer content, IProgressMonitor monitor) {
		super.writeFields(content, monitor);

		CodeUtils.writeFinalField(content, getFieldName(), getCollectionClass(), getCollectionImplClass());
		content.p(";");

		content.p();
	}

	public void writeMethods(ContentBuffer content, IProgressMonitor monitor) {
		super.writeMethods(content, monitor);

		//
		// getter
		//
		content.pi("/**", " * ");
		content.p("Returns the value of property " + getName() + " at the specified index.");
		if (getDescription() != null) {
			content.p();
			content.p(getDescription());
		}
		content.p();
		content.p("@param index The index, which must be valid.");
		content.p("@return The value of property " + getName() + " at the specified index.");
		content.p("@see " + getCollectionClass().getName() + "#get(int)");
		content.pu(" */");

		content.pi(getGetterVisibility() + " final " + getType() + " get" + getCapName() + "(int index) {");
		content.p("return (" + getType() + ") " + getFieldName() + ".get(index);");
		content.pu("}");

		content.p();

		//
		// iterator
		//
		content.pi("/**", " * ");
		content.p("@return An {@link " + Iterator.class.getName() + "} over all values of property " + getName() + ".");
		content.p("@see " + getCollectionClass().getName() + "#iterator()");
		content.pu(" */");

		content.pi(getGetterVisibility() + " final " + Iterator.class.getName() + " " + getName() + "Iterator() {");
		content.p("return " + getFieldName() + ".iterator();");
		content.pu("}");

		content.p();

		//
		// size
		//
		content.pi("/**", " * ");
		content.p("@return The number of values of property " + getName() + ".");
		content.p("@see " + getCollectionClass().getName() + "#size()");
		content.pu(" */");

		content.pi(getGetterVisibility() + " final int " + getName() + "Size() {");
		content.p("return " + getFieldName() + ".size();");
		content.pu("}");

		content.p();

		//
		// adder
		//
		content.pi("/**", " * ");
		content.p("Add the specified value to property " + getName() + ".");
		if (getBackrefProperty() != null) {
			content.p("Referred from " + getBackrefProperty().getJavaDocFullName()
			      + ", which will be updated by this method.");
		}
		if (getDescription() != null) {
			content.p();
			content.p(getDescription());
		}
		content.p();
		content.p("@param " + getParameterVarName() + " The additional value for property " + getName() + ".");
		content.p("@see " + getCollectionClass().getName() + "#add(Object)");
		content.pu(" */");

		content.pi(getSetterVisibility() + " final void " + getAddMethodName() + "(final " + getType() + " "
		      + getParameterVarName() + ") {");
		if (getBackrefProperty() == null) {
			content.p(getFieldName() + ".add(" + getParameterVarName() + ");");
		} else if (getBackrefProperty().getBackrefProperty() == null) {
			content.p(getFieldName() + ".add(" + getParameterVarName() + ");");
			content.p(getBackrefProperty().getAdderCall(getParameterVarName(), "this") + ";");
		} else {
			content.pi("if (" + getFieldName() + ".contains(" + getParameterVarName() + ")) {");
			content.p("return;");
			content.pu("}");
			content.p(getFieldName() + ".add(" + getParameterVarName() + ");");
			content.p(getBackrefProperty().getAdderCall(getParameterVarName(), "this") + ";");
		}
		content.pu("}");

		content.p();

		//
		// remover
		//
		content.pi("/**", " * ");
		content.p("Remove the specified value of property " + getName() + ".");
		if (getBackrefProperty() != null) {
			content.p("Referred from " + getBackrefProperty().getJavaDocFullName()
			      + ", which will be updated by this method.");
		}
		if (getDescription() != null) {
			content.p();
			content.p(getDescription());
		}
		content.p();
		content.p("@param " + getParameterVarName() + " The value to remove from property " + getName() + ".");
		content.p("@see " + getCollectionClass().getName() + "#remove(Object)");
		content.pu(" */");

		content.pi(getSetterVisibility() + " final void " + getRemoveMethodName() + "(final " + getType() + " "
		      + getParameterVarName() + ") {");
		if (getBackrefProperty() == null) {
			content.p(getFieldName() + ".remove(" + getParameterVarName() + ");");
		} else if (getBackrefProperty().getBackrefProperty() == null) {
			content.p(getFieldName() + ".remove(" + getParameterVarName() + ");");
			content.p(getBackrefProperty().getRemoverCall(getParameterVarName(), "this") + ";");
		} else {
			content.pi("if (!" + getFieldName() + ".contains(" + getParameterVarName() + ")) {");
			content.p("return;");
			content.pu("}");
			content.p(getFieldName() + ".remove(" + getParameterVarName() + ");");
			content.p(getBackrefProperty().getRemoverCall(getParameterVarName(), "this") + ";");
		}
		content.pu("}");

		content.p();
	}
}
