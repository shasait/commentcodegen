package de.hasait.eclipse.ccg.javag.application.model;

import org.eclipse.core.runtime.IProgressMonitor;

import de.hasait.eclipse.common.ContentBuffer;

/**
 * Generated by CommentCodeGen: /ccgtest/ccg/test1.ccg.xml
 */
public class MultiProperty extends AbstractProperty {
	private final String _addMethodName;

	private final String _removeMethodName;

	/**
	 * Constructor.
	 */
	public MultiProperty(Bean bean, String name, String description, String type, String backref,
	      String getterVisibility, String setterVisibility) {
		super(bean, name, description, type, backref, getterVisibility, setterVisibility);

		_addMethodName = "add" + getCapName();
		_removeMethodName = "remove" + getCapName();
	}

	/**
	 * @return the addMethodName
	 */
	public final String getAddMethodName() {
		return _addMethodName;
	}

	/**
	 * @return the removeMethodName
	 */
	public final String getRemoveMethodName() {
		return _removeMethodName;
	}

	public final String getAdderCall(String instance, String value) {
		return instance + "." + getAddMethodName() + "(" + value + ")";
	}

	public final String getRemoverCall(String instance, String value) {
		return instance + "." + getRemoveMethodName() + "(" + value + ")";
	}

	public void writeFields(ContentBuffer content, IProgressMonitor monitor) {
		super.writeFields(content, monitor);

		content.p("private final java.util.List " + getVarName() + " = new java.util.ArrayList();");

		content.p();
	}

	public void writeMethods(ContentBuffer content, IProgressMonitor monitor) {
		super.writeMethods(content, monitor);

		//
		// getter
		//
		content.pi("/**", " * ");
		content.p("Returns the value of property " + getName() + " at the specified index.");
		if (getDescription() != null) {
			content.p();
			content.p(getDescription());
		}
		content.p();
		content.p("@param index The index, which must be valid.");
		content.p("@return The value of property " + getName() + " at the specified index.");
		content.p("@see java.util.List#get(int)");
		content.pu(" */");

		content.pi(getGetterVisibility() + " final " + getType() + " get" + getCapName() + "(int index) {");
		content.p("return (" + getType() + ") " + getVarName() + ".get(index);");
		content.pu("}");

		content.p();

		//
		// iterator
		//
		content.pi("/**", " * ");
		content.p("Returns an {@link java.util.Iterator} over all values of property " + getName() + ".");
		content.p();
		content.p("@return An {@link java.util.Iterator} over all values of property " + getName() + ".");
		content.p("@see java.util.List#iterator()");
		content.pu(" */");

		content.pi(getGetterVisibility() + " final java.util.Iterator " + getName() + "Iterator() {");
		content.p("return " + getVarName() + ".iterator();");
		content.pu("}");

		content.p();

		//
		// size
		//
		content.pi("/**", " * ");
		content.p("Returns the number of values of property " + getName() + ".");
		content.p();
		content.p("@return The number of values of property " + getName() + ".");
		content.p("@see java.util.List#size()");
		content.pu(" */");

		content.pi(getGetterVisibility() + " final int " + getName() + "Size() {");
		content.p("return " + getVarName() + ".size();");
		content.pu("}");

		content.p();

		//
		// adder
		//
		content.pi("/**", " * ");
		content.p("Add the specified value to property " + getName() + ".");
		if (getBackrefProperty() != null) {
			content.p("Referred from " + getBackrefProperty().getJavaDocFullName()
			      + ", which will be updated by this method.");
		}
		if (getDescription() != null) {
			content.p();
			content.p(getDescription());
		}
		content.p();
		content.p("@param " + getName() + " The additional value for property " + getName() + ".");
		content.p("@see java.util.List#add(Object)");
		content.pu(" */");

		content.pi(getSetterVisibility() + " final void " + getAddMethodName() + "(final " + getType() + " " + getName()
		      + ") {");
		if (getBackrefProperty() == null) {
			content.p(getVarName() + ".add(" + getName() + ");");
		} else if (getBackrefProperty().getBackrefProperty() == null) {
			content.p(getVarName() + ".add(" + getName() + ");");
			content.p(getBackrefProperty().getAdderCall(getName(), "this") + ";");
		} else {
			content.pi("if (" + getVarName() + ".contains(" + getName() + ")) {");
			content.p("return;");
			content.pu("}");
			content.p(getVarName() + ".add(" + getName() + ");");
			content.p(getBackrefProperty().getAdderCall(getName(), "this") + ";");
		}
		content.pu("}");

		content.p();

		//
		// remover
		//
		content.pi("/**", " * ");
		content.p("Remove the specified value of property " + getName() + ".");
		if (getBackrefProperty() != null) {
			content.p("Referred from " + getBackrefProperty().getJavaDocFullName()
			      + ", which will be updated by this method.");
		}
		if (getDescription() != null) {
			content.p();
			content.p(getDescription());
		}
		content.p();
		content.p("@param " + getName() + " The value to remove from property " + getName() + ".");
		content.p("@see java.util.List#remove(Object)");
		content.pu(" */");

		content.pi(getSetterVisibility() + " final void " + getRemoveMethodName() + "(final " + getType() + " "
		      + getName() + ") {");
		if (getBackrefProperty() == null) {
			content.p(getVarName() + ".remove(" + getName() + ");");
		} else if (getBackrefProperty().getBackrefProperty() == null) {
			content.p(getVarName() + ".remove(" + getName() + ");");
			content.p(getBackrefProperty().getRemoverCall(getName(), "this") + ";");
		} else {
			content.pi("if (!" + getVarName() + ".contains(" + getName() + ")) {");
			content.p("return;");
			content.pu("}");
			content.p(getVarName() + ".remove(" + getName() + ");");
			content.p(getBackrefProperty().getRemoverCall(getName(), "this") + ";");
		}
		content.pu("}");

		content.p();
	}
}
