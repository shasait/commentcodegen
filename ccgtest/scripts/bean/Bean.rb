require("SingleProperty")
require("MultiProperty")

class Bean
	attr_accessor :package
	attr_accessor :name
	attr_accessor :description
	attr_accessor :abstract	
	attr_accessor :extends
	attr_accessor :extendsBean
	attr_accessor :implements

	attr_accessor :file
	attr_accessor :properties
	attr_accessor :propertiesByName
	attr_accessor :subclasses
	
	def initialize(package, configElement)
		puts("Bean")
		@package = package
		@name = configElement.getRequiredAttribute("name")
		@description = configElement.getAttribute("description")
		@abstract = configElement.getAttributeAsBoolean("abstract", false)
		@extends = configElement.getAttribute("extends")
		@implements = []
		configElement.getChildElements("implements").each {
			|implementsElement|
			@implements << implementsElement.getTextContent()
		}
		
		@file = @package.folder.getFile(@name + ".java")
		puts("bean.file is #{file.fullPath}")

		@properties = []
		@propertiesByName = {}
		@subclasses = []
		
		configElement.getChildElements("property").each {
			|propertyElement|
			cardinality = propertyElement.getAttribute("cardinality", "1")
			if cardinality == "1"
				property = SingleProperty.new(self, propertyElement)
			elsif cardinality == "*"
				property = MultiProperty.new(self, propertyElement)
			else
				raise "invalid kind: #{kind}"
			end
			@properties << property
			@propertiesByName[property.name] = property
		}
	end

	def getFullName()
		return "#{@package.name}.#{@name}"
	end

	def getJavaDocFullName()
		return "{@link #{getFullName()}"
	end
	
	def resolve()
		if !@extends.nil?
			@extendsBean = @package.findBean(@extends)
			if !@extendsBean.nil?
				extendsBean.subclasses << self
			end
		end
		@properties.each {
			|property|
			property.resolve()
		}
	end
	
	def write(content, monitor)
		puts("write Bean #{name}")
		content.pi("/**", " * ")
		if !@description.nil?
			content.p("#{@description}")
			content.p()
		end
		if @subclasses.size > 0
			content.pi("Subclasses are:<ul>")
			@subclasses.each {
				|bean|
				content.p("<li>#{bean.getJavaDocFullName()}</li>")
			}
			content.pu("</ul>")
		end
		content.p("Generated by CommentCodeGen: #{package.root.sourceFile.fullPath}")
		content.pu(" */")
		content.a("public ")
		if @abstract
			content.a("abstract ")		
		end
		content.a("class #{name} ")
		if !@extends.nil?
			content.a("extends #{extends} ")
		end
		if @implements.size > 0
			content.a("implements ")
			first = true		
			@implements.each {
				|element|
				if first
					first = false
				else
					content.a(", ")
				end
				content.a("#{element}")
			}
			content.a(" ")
		end
		content.pi("{")
		@properties.each {
			|property|
			property.write(content, monitor)
		}
		content.pu("}")
	end
end
