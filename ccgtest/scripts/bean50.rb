class Root
	attr_accessor :sourceFile
	attr_accessor :sourceFolder

	attr_accessor :packages
	
	def initialize(sourceFile, element)
		puts("Root")
		@sourceFile = sourceFile
		
		sourceFolderPath = element.getRequiredAttribute("sourcefolder")
		@sourceFolder = $resources.getRelativeFolder(@sourceFile, sourceFolderPath)
		puts("root.sourceFolder is #{sourceFolder.fullPath}")

		@packages = {}
		
		element.getChildElements("package").each {
			|packageElement|
			package = Package.new(self, packageElement)
			@packages[package.name] = package
		}
	end
	
	def resolve()
		@packages.each_value {
			|package|
			package.resolve()
		}
	end
	
	def write()
		puts("write Root")
		@packages.each_value {
			|package|
			package.write()
		}
	end
end

class Package
	attr_accessor :root
	attr_accessor :name
	attr_accessor :clean
	attr_accessor :folder
	
	attr_accessor :beans
	
	def initialize(root, element)
		puts("Package")
		@root = root
		@name = element.getRequiredAttribute("name")
		@clean = element.getAttributeAsBoolean("clean")
		
		folderPath = @name.gsub('.', '/')
		@folder = $resources.getRelativeFolder(@root.sourceFolder, folderPath)
		puts("package.folder is #{folder.fullPath}")

		@beans = {}
		
		element.getChildElements("bean").each {
			|beanElement|
			bean = Bean.new(self, beanElement)
			@beans[bean.name] = bean
		}
	end
	
	def resolve()
		@beans.each_value {
			|bean|
			bean.resolve()
		}
	end
	
	def write()
		if @clean
			puts("clean Package #{name}")
			$resources.deleteAllFiles(@folder, true)
		end
		puts("write Package #{name}")
		@beans.each_value {
			|bean|
			content = $resources.createContent()
			content.p("package " + @name + ";")
			content.p()
			bean.write(content)
			$resources.writeFile(bean.file, content.content, true)
		}
	end
end

class Bean
	attr_accessor :package
	attr_accessor :name
	attr_accessor :file

	attr_accessor :properties
	
	def initialize(package, element)
		puts("Bean")
		@package = package
		@name = element.getRequiredAttribute("name")
		
		@file = $resources.getRelativeFile(@package.folder, @name + ".java")
		puts("bean.file is #{file.fullPath}")

		@properties = {}
		
		element.getChildElements("property").each {
			|propertyElement|
			cardinality = propertyElement.getAttribute("cardinality", "1")
			if cardinality == "1"
				property = SingleProperty.new(self, propertyElement)
			elsif cardinality == "*"
				property = MultiProperty.new(self, propertyElement)
			else
				raise "invalid kind: #{kind}"
			end
			@properties[property.name] = property
		}
	end
	
	def resolve()
		@properties.each_value {
			|property|
			property.resolve()
		}
	end
	
	def write(content)
		puts("write Bean #{name}")
		content.pi("/**", " * ")
		content.p("Generated by EasyCodeGen: #{package.root.sourceFile.fullPath}")
		content.pu(" */")
		content.pi("public class #{name} {")
		@properties.each_value {
			|property|
			property.write(content)
			content.p()
		}
		content.pu("}")
	end
end

class SingleProperty
	attr_accessor :bean
	attr_accessor :name
	attr_accessor :type
	attr_accessor :backref
	attr_accessor :varName
	attr_accessor :capName
	attr_accessor :getterPrefix
	attr_accessor :getterVisibility
	attr_accessor :setterVisibility
	attr_accessor :backrefProperty
	
	def initialize(bean, element)
		@bean = bean
		@name = element.getAttribute("name")
		@type = element.getAttribute("type")
		@backref = element.getAttribute("backref")
		
		@varName = "_#{name}"

		@capName = @name.capitalize
		
		if @type == "boolean"
			@getterPrefix = "is"
		else
			@getterPrefix = "get"
		end

		@getterVisibility = "public"
		@setterVisibility = "public"
	end
	
	def resolve()		
		if !@backref.nil?
			@backrefProperty = @bean.package.beans[@type].properties[@backref]
			puts("backref of #{@bean.name}.#{@name} is #{@backrefProperty.bean.name}.#{@backrefProperty.name}")
		end
	end
	
	def getAdderCall(instance, value)
		return "#{instance}.set#{@capName}(#{value});"
	end
	
	def getRemoverCall(instance, value)
		return "#{instance}.set#{@capName}(null);"
	end
	
	def getNameConstant()
		return "PROPERTY_#{@name.upcase()}_NAME"
	end
	
	def getTypeConstant()
		return "PROPERTY_#{@name.upcase()}_TYPE"
	end
	
	def getJavaDocFullName()
		return "{@link #{@bean.package.name}.#{@bean.name}\##{@varName}}"
	end
	
	def write(content)
		#
		# constants
		#
		content.pi("/**", " * ")
		content.p("Single-Property name constant.")
		if !@backrefProperty.nil?
			content.p("Ref from #{@backrefProperty.getJavaDocFullName()}")
		end
		content.pu(" */")
		content.p("public static final String #{getNameConstant()} = \"#{@name}\";")
		content.p("public static final Class #{getTypeConstant()} = #{@type}.class;")
		
		#
		# variable
		#
		content.p()
		content.p("private #{@type} #{@varName};")
		
		#
		# getter
		#
		content.p()
		content.pi("#{@getterVisibility} final #{@type} #{@getterPrefix}#{@capName}() {")
		
		content.p("return #{@varName};")
		
		content.pu("}")
		
		#
		# setter
		#
		content.p()
		content.pi("#{@setterVisibility} final void set#{@capName}(final #{@type} #{@name}) {")
		
		if @backrefProperty.nil?
			content.p("#{@varName} = #{@name};")
		else
			content.pi("if (#{@varName} == #{@name}) {")
			content.p("return;")
			content.pu("}")
			oldName = "old#{@capName}"
			content.p("#{@type} #{oldName} = #{@varName};")
			content.pi("if (#{@varName} != null) {")
			content.p("#{@varName} = null;")
			content.p(@backrefProperty.getRemoverCall(oldName, "this"))
			content.pu("}")
			content.p("#{@varName} = #{@name};")
			content.pi("if (#{@name} != null) {")
			content.p(@backrefProperty.getAdderCall(@name, "this"))
			content.pu("}")
		end
		
		content.pu("}")
	end
end

class MultiProperty
	attr_accessor :bean
	attr_accessor :name
	attr_accessor :type
	attr_accessor :backref
	attr_accessor :varName
	attr_accessor :capName
	attr_accessor :getterVisibility
	attr_accessor :setterVisibility
	attr_accessor :backrefProperty
	
	def initialize(bean, element)
		@bean = bean
		@name = element.getAttribute("name")
		@type = element.getAttribute("type")
		@backref = element.getAttribute("backref")
		
		@varName = "_#{name}"

		@capName = @name.capitalize
		
		@getterVisibility = "public"
		@setterVisibility = "public"
	end
	
	def resolve()		
		if !@backref.nil?
			@backrefProperty = @bean.package.beans[@type].properties[@backref]
			puts("backref of #{@bean.name}.#{@name} is #{@backrefProperty.bean.name}.#{@backrefProperty.name}")
		end
	end
	
	def getAdderCall(instance, value)
		return "#{instance}.add#{@capName}(#{value});"
	end
	
	def getRemoverCall(instance, value)
		return "#{instance}.remove#{@capName}(#{value});"
	end
	
	def getNameConstant()
		return "PROPERTY_#{@name.upcase()}_NAME"
	end
	
	def getTypeConstant()
		return "PROPERTY_#{@name.upcase()}_TYPE"
	end
	
	def getJavaDocFullName()
		return "{@link #{@bean.package.name}.#{@bean.name}\##{@varName}}"
	end
	
	def write(content)
		#
		# constants
		#
		content.pi("/**", " * ")
		content.p("Multi-Property name constant.")
		if !@backrefProperty.nil?
			content.p("Ref from #{@backrefProperty.getJavaDocFullName()}")
		end
		content.pu(" */")
		content.p("public static final String #{getNameConstant()} = \"#{@name}\";")
		content.p("public static final Class #{getTypeConstant()} = #{@type}.class;")
		
		#
		# variable
		#
		content.p()
		content.p("private final java.util.List<#{@type}> #{@varName} = new java.util.ArrayList<#{@type}>();")
		
		#
		# getter
		#
		content.p()
		content.pi("#{@getterVisibility} final #{@type} get#{@capName}(int index) {")
		
		content.p("return #{@varName}.get(index);")
		
		content.pu("}")
		
		content.p()
		content.pi("#{@getterVisibility} final java.util.Iterator<#{@type}> #{@name}Iterator() {")
		
		content.p("return #{@varName}.iterator();")
		
		content.pu("}")
		
		content.p()
		content.pi("#{@getterVisibility} final int #{@name}Size() {")
		
		content.p("return #{@varName}.size();")
		
		content.pu("}")
		
		#
		# adder
		#
		content.p()
		content.pi("#{@setterVisibility} final void add#{@capName}(final #{@type} #{@name}) {")
		
		if @backrefProperty.nil?
			content.p("#{@varName}.add(#{@name});")
		else
			content.pi("if (#{@varName}.contains(#{@name})) {")
			content.p("return;")
			content.pu("}")
			content.p("#{@varName}.add(#{@name});")
			content.p(@backrefProperty.getAdderCall(@name, "this"))
		end
		
		content.pu("}")
		
		#
		# remover
		#
		content.p()
		content.pi("#{@setterVisibility} final void remove#{@capName}(final #{@type} #{@name}) {")
		
		if @backrefProperty.nil?
			content.p("#{@varName}.remove(#{@name});")
		else
			content.pi("if (!#{@varName}.contains(#{@name})) {")
			content.p("return;")
			content.pu("}")
			content.p("#{@varName}.remove(#{@name});")
			content.p(@backrefProperty.getRemoverCall(@name, "this"))
		end
		
		content.pu("}")
	end
end
