/*
 * $Id: JavaCommentAst.jjt,v 1.1.1.1 2005-09-01 23:06:39 a-pi Exp $
 * 
 * Copyright 2005 Sebastian Hasait
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

options {
  JAVA_UNICODE_ESCAPE = true;
  ERROR_REPORTING = false;
  STATIC = false;
  BUILD_NODE_FILES = false;
  MULTI = true;
  NODE_PACKAGE = "de.hasait.transformator.javacommentast.gen";
  NODE_FACTORY = false;
  NODE_SCOPE_HOOK = false;
  NODE_USES_PARSER = true;
}

PARSER_BEGIN(JavaCommentParser)

package de.hasait.ccg.javap.javacommentast.gen;

import de.hasait.ccg.javap.node.*;

/**
 * Grammar to parse Java Comments
 * @author Sebastian Hasait (hasait at web.de)
 * @version $Revision: 1.1.1.1 $
 */
public class JavaCommentParser {
}

PARSER_END(JavaCommentParser)

TOKEN :
{
  <BLOCK_COMMENT_START: "/*" > : IN_BLOCK_COMMENT
|
  <LINE_COMMENT_START: "//" > : IN_LINE_COMMENT
|
  <NON_COMMENT: ~[] >
}

<IN_BLOCK_COMMENT>
TOKEN :
{
  <BLOCK_COMMENT_END: "*/" > : DEFAULT
}

<IN_LINE_COMMENT>
TOKEN :
{
  <LINE_COMMENT_END: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_BLOCK_COMMENT,IN_LINE_COMMENT>
TOKEN :
{
  <COMMENT: ~[] >
}

/*
 * Program structuring syntax follows.
 */

ASTRoot Root():
{}
{
  (
    ( BlockComment()
    | LineComment()
    | NonComment()
    )
  )*
  <EOF>
  { return jjtThis; }
}

void BlockComment():
{}
{
  BlockCommentStart() (Comment())* BlockCommentEnd()
}

void BlockCommentStart():
{}
{
  <BLOCK_COMMENT_START>
}

void BlockCommentEnd():
{}
{
  <BLOCK_COMMENT_END>
}

void LineComment():
{}
{
  LineCommentStart() (Comment())* LineCommentEnd()
}

void LineCommentStart():
{}
{
  <LINE_COMMENT_START>
}

void LineCommentEnd():
{}
{
  <LINE_COMMENT_END>
}

void Comment():
{}
{
  <COMMENT>
}

void NonComment():
{}
{
  <NON_COMMENT>
}
